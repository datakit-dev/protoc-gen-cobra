// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: proto2.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Sound2_Enum int32

const (
	Sound2_JAN Sound2_Enum = 0
	Sound2_FEB Sound2_Enum = 1
	Sound2_MAR Sound2_Enum = 2
)

// Enum value maps for Sound2_Enum.
var (
	Sound2_Enum_name = map[int32]string{
		0: "JAN",
		1: "FEB",
		2: "MAR",
	}
	Sound2_Enum_value = map[string]int32{
		"JAN": 0,
		"FEB": 1,
		"MAR": 2,
	}
)

func (x Sound2_Enum) Enum() *Sound2_Enum {
	p := new(Sound2_Enum)
	*p = x
	return p
}

func (x Sound2_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sound2_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto2_proto_enumTypes[0].Descriptor()
}

func (Sound2_Enum) Type() protoreflect.EnumType {
	return &file_proto2_proto_enumTypes[0]
}

func (x Sound2_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Sound2_Enum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Sound2_Enum(num)
	return nil
}

// Deprecated: Use Sound2_Enum.Descriptor instead.
func (Sound2_Enum) EnumDescriptor() ([]byte, []int) {
	return file_proto2_proto_rawDescGZIP(), []int{0, 0}
}

type Sound2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Double            *float64                  `protobuf:"fixed64,1,opt,name=double" json:"double,omitempty"`
	Float             *float32                  `protobuf:"fixed32,2,opt,name=float" json:"float,omitempty"`
	Int32             *int32                    `protobuf:"varint,3,opt,name=int32" json:"int32,omitempty"`
	Int64             *int64                    `protobuf:"varint,4,opt,name=int64" json:"int64,omitempty"`
	Uint32            *uint32                   `protobuf:"varint,5,opt,name=uint32" json:"uint32,omitempty"`
	Uint64            *uint64                   `protobuf:"varint,6,opt,name=uint64" json:"uint64,omitempty"`
	Sint32            *int32                    `protobuf:"zigzag32,7,opt,name=sint32" json:"sint32,omitempty"`
	Sint64            *int64                    `protobuf:"zigzag64,8,opt,name=sint64" json:"sint64,omitempty"`
	Fixed32           *uint32                   `protobuf:"fixed32,9,opt,name=fixed32" json:"fixed32,omitempty"`
	Fixed64           *uint64                   `protobuf:"fixed64,10,opt,name=fixed64" json:"fixed64,omitempty"`
	Sfixed32          *int32                    `protobuf:"fixed32,11,opt,name=sfixed32" json:"sfixed32,omitempty"`
	Sfixed64          *int64                    `protobuf:"fixed64,12,opt,name=sfixed64" json:"sfixed64,omitempty"`
	Bool              *bool                     `protobuf:"varint,13,opt,name=bool" json:"bool,omitempty"`
	String_           *string                   `protobuf:"bytes,14,opt,name=string" json:"string,omitempty"`
	Bytes             []byte                    `protobuf:"bytes,15,opt,name=bytes" json:"bytes,omitempty"`
	ListDouble        []float64                 `protobuf:"fixed64,21,rep,name=list_double,json=listDouble" json:"list_double,omitempty"`
	ListFloat         []float32                 `protobuf:"fixed32,22,rep,name=list_float,json=listFloat" json:"list_float,omitempty"`
	ListInt32         []int32                   `protobuf:"varint,23,rep,name=list_int32,json=listInt32" json:"list_int32,omitempty"`
	ListInt64         []int64                   `protobuf:"varint,24,rep,name=list_int64,json=listInt64" json:"list_int64,omitempty"`
	ListUint32        []uint32                  `protobuf:"varint,25,rep,name=list_uint32,json=listUint32" json:"list_uint32,omitempty"`
	ListUint64        []uint64                  `protobuf:"varint,26,rep,name=list_uint64,json=listUint64" json:"list_uint64,omitempty"`
	ListSint32        []int32                   `protobuf:"zigzag32,27,rep,name=list_sint32,json=listSint32" json:"list_sint32,omitempty"`
	ListSint64        []int64                   `protobuf:"zigzag64,28,rep,name=list_sint64,json=listSint64" json:"list_sint64,omitempty"`
	ListFixed32       []uint32                  `protobuf:"fixed32,29,rep,name=list_fixed32,json=listFixed32" json:"list_fixed32,omitempty"`
	ListFixed64       []uint64                  `protobuf:"fixed64,30,rep,name=list_fixed64,json=listFixed64" json:"list_fixed64,omitempty"`
	ListSfixed32      []int32                   `protobuf:"fixed32,31,rep,name=list_sfixed32,json=listSfixed32" json:"list_sfixed32,omitempty"`
	ListSfixed64      []int64                   `protobuf:"fixed64,32,rep,name=list_sfixed64,json=listSfixed64" json:"list_sfixed64,omitempty"`
	ListBool          []bool                    `protobuf:"varint,33,rep,name=list_bool,json=listBool" json:"list_bool,omitempty"`
	ListString        []string                  `protobuf:"bytes,34,rep,name=list_string,json=listString" json:"list_string,omitempty"`
	ListBytes         [][]byte                  `protobuf:"bytes,35,rep,name=list_bytes,json=listBytes" json:"list_bytes,omitempty"`
	MapStringInt64    map[string]int64          `protobuf:"bytes,41,rep,name=map_string_int64,json=mapStringInt64" json:"map_string_int64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapStringString   map[string]string         `protobuf:"bytes,42,rep,name=map_string_string,json=mapStringString" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Enum              *Sound2_Enum              `protobuf:"varint,43,opt,name=enum,enum=example.Sound2_Enum" json:"enum,omitempty"`
	ListEnum          []Sound2_Enum             `protobuf:"varint,44,rep,name=list_enum,json=listEnum,enum=example.Sound2_Enum" json:"list_enum,omitempty"`
	Timestamp         *timestamppb.Timestamp    `protobuf:"bytes,51,opt,name=timestamp" json:"timestamp,omitempty"`
	Duration          *durationpb.Duration      `protobuf:"bytes,52,opt,name=duration" json:"duration,omitempty"`
	WrapperBool       *wrapperspb.BoolValue     `protobuf:"bytes,53,opt,name=wrapper_bool,json=wrapperBool" json:"wrapper_bool,omitempty"`
	WrapperBytes      *wrapperspb.BytesValue    `protobuf:"bytes,54,opt,name=wrapper_bytes,json=wrapperBytes" json:"wrapper_bytes,omitempty"`
	WrapperDouble     *wrapperspb.DoubleValue   `protobuf:"bytes,55,opt,name=wrapper_double,json=wrapperDouble" json:"wrapper_double,omitempty"`
	WrapperFloat      *wrapperspb.FloatValue    `protobuf:"bytes,56,opt,name=wrapper_float,json=wrapperFloat" json:"wrapper_float,omitempty"`
	WrapperInt32      *wrapperspb.Int32Value    `protobuf:"bytes,57,opt,name=wrapper_int32,json=wrapperInt32" json:"wrapper_int32,omitempty"`
	WrapperInt64      *wrapperspb.Int64Value    `protobuf:"bytes,58,opt,name=wrapper_int64,json=wrapperInt64" json:"wrapper_int64,omitempty"`
	WrapperString     *wrapperspb.StringValue   `protobuf:"bytes,59,opt,name=wrapper_string,json=wrapperString" json:"wrapper_string,omitempty"`
	WrapperUint32     *wrapperspb.UInt32Value   `protobuf:"bytes,60,opt,name=wrapper_uint32,json=wrapperUint32" json:"wrapper_uint32,omitempty"`
	WrapperUint64     *wrapperspb.UInt64Value   `protobuf:"bytes,61,opt,name=wrapper_uint64,json=wrapperUint64" json:"wrapper_uint64,omitempty"`
	ListTimestamp     []*timestamppb.Timestamp  `protobuf:"bytes,71,rep,name=list_timestamp,json=listTimestamp" json:"list_timestamp,omitempty"`
	ListDuration      []*durationpb.Duration    `protobuf:"bytes,72,rep,name=list_duration,json=listDuration" json:"list_duration,omitempty"`
	ListWrapperBool   []*wrapperspb.BoolValue   `protobuf:"bytes,73,rep,name=list_wrapper_bool,json=listWrapperBool" json:"list_wrapper_bool,omitempty"`
	ListWrapperBytes  []*wrapperspb.BytesValue  `protobuf:"bytes,74,rep,name=list_wrapper_bytes,json=listWrapperBytes" json:"list_wrapper_bytes,omitempty"`
	ListWrapperDouble []*wrapperspb.DoubleValue `protobuf:"bytes,75,rep,name=list_wrapper_double,json=listWrapperDouble" json:"list_wrapper_double,omitempty"`
	ListWrapperFloat  []*wrapperspb.FloatValue  `protobuf:"bytes,76,rep,name=list_wrapper_float,json=listWrapperFloat" json:"list_wrapper_float,omitempty"`
	ListWrapperInt32  []*wrapperspb.Int32Value  `protobuf:"bytes,77,rep,name=list_wrapper_int32,json=listWrapperInt32" json:"list_wrapper_int32,omitempty"`
	ListWrapperInt64  []*wrapperspb.Int64Value  `protobuf:"bytes,78,rep,name=list_wrapper_int64,json=listWrapperInt64" json:"list_wrapper_int64,omitempty"`
	ListWrapperString []*wrapperspb.StringValue `protobuf:"bytes,79,rep,name=list_wrapper_string,json=listWrapperString" json:"list_wrapper_string,omitempty"`
	ListWrapperUint32 []*wrapperspb.UInt32Value `protobuf:"bytes,80,rep,name=list_wrapper_uint32,json=listWrapperUint32" json:"list_wrapper_uint32,omitempty"`
	ListWrapperUint64 []*wrapperspb.UInt64Value `protobuf:"bytes,81,rep,name=list_wrapper_uint64,json=listWrapperUint64" json:"list_wrapper_uint64,omitempty"`
}

func (x *Sound2) Reset() {
	*x = Sound2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sound2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sound2) ProtoMessage() {}

func (x *Sound2) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sound2.ProtoReflect.Descriptor instead.
func (*Sound2) Descriptor() ([]byte, []int) {
	return file_proto2_proto_rawDescGZIP(), []int{0}
}

func (x *Sound2) GetDouble() float64 {
	if x != nil && x.Double != nil {
		return *x.Double
	}
	return 0
}

func (x *Sound2) GetFloat() float32 {
	if x != nil && x.Float != nil {
		return *x.Float
	}
	return 0
}

func (x *Sound2) GetInt32() int32 {
	if x != nil && x.Int32 != nil {
		return *x.Int32
	}
	return 0
}

func (x *Sound2) GetInt64() int64 {
	if x != nil && x.Int64 != nil {
		return *x.Int64
	}
	return 0
}

func (x *Sound2) GetUint32() uint32 {
	if x != nil && x.Uint32 != nil {
		return *x.Uint32
	}
	return 0
}

func (x *Sound2) GetUint64() uint64 {
	if x != nil && x.Uint64 != nil {
		return *x.Uint64
	}
	return 0
}

func (x *Sound2) GetSint32() int32 {
	if x != nil && x.Sint32 != nil {
		return *x.Sint32
	}
	return 0
}

func (x *Sound2) GetSint64() int64 {
	if x != nil && x.Sint64 != nil {
		return *x.Sint64
	}
	return 0
}

func (x *Sound2) GetFixed32() uint32 {
	if x != nil && x.Fixed32 != nil {
		return *x.Fixed32
	}
	return 0
}

func (x *Sound2) GetFixed64() uint64 {
	if x != nil && x.Fixed64 != nil {
		return *x.Fixed64
	}
	return 0
}

func (x *Sound2) GetSfixed32() int32 {
	if x != nil && x.Sfixed32 != nil {
		return *x.Sfixed32
	}
	return 0
}

func (x *Sound2) GetSfixed64() int64 {
	if x != nil && x.Sfixed64 != nil {
		return *x.Sfixed64
	}
	return 0
}

func (x *Sound2) GetBool() bool {
	if x != nil && x.Bool != nil {
		return *x.Bool
	}
	return false
}

func (x *Sound2) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *Sound2) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *Sound2) GetListDouble() []float64 {
	if x != nil {
		return x.ListDouble
	}
	return nil
}

func (x *Sound2) GetListFloat() []float32 {
	if x != nil {
		return x.ListFloat
	}
	return nil
}

func (x *Sound2) GetListInt32() []int32 {
	if x != nil {
		return x.ListInt32
	}
	return nil
}

func (x *Sound2) GetListInt64() []int64 {
	if x != nil {
		return x.ListInt64
	}
	return nil
}

func (x *Sound2) GetListUint32() []uint32 {
	if x != nil {
		return x.ListUint32
	}
	return nil
}

func (x *Sound2) GetListUint64() []uint64 {
	if x != nil {
		return x.ListUint64
	}
	return nil
}

func (x *Sound2) GetListSint32() []int32 {
	if x != nil {
		return x.ListSint32
	}
	return nil
}

func (x *Sound2) GetListSint64() []int64 {
	if x != nil {
		return x.ListSint64
	}
	return nil
}

func (x *Sound2) GetListFixed32() []uint32 {
	if x != nil {
		return x.ListFixed32
	}
	return nil
}

func (x *Sound2) GetListFixed64() []uint64 {
	if x != nil {
		return x.ListFixed64
	}
	return nil
}

func (x *Sound2) GetListSfixed32() []int32 {
	if x != nil {
		return x.ListSfixed32
	}
	return nil
}

func (x *Sound2) GetListSfixed64() []int64 {
	if x != nil {
		return x.ListSfixed64
	}
	return nil
}

func (x *Sound2) GetListBool() []bool {
	if x != nil {
		return x.ListBool
	}
	return nil
}

func (x *Sound2) GetListString() []string {
	if x != nil {
		return x.ListString
	}
	return nil
}

func (x *Sound2) GetListBytes() [][]byte {
	if x != nil {
		return x.ListBytes
	}
	return nil
}

func (x *Sound2) GetMapStringInt64() map[string]int64 {
	if x != nil {
		return x.MapStringInt64
	}
	return nil
}

func (x *Sound2) GetMapStringString() map[string]string {
	if x != nil {
		return x.MapStringString
	}
	return nil
}

func (x *Sound2) GetEnum() Sound2_Enum {
	if x != nil && x.Enum != nil {
		return *x.Enum
	}
	return Sound2_JAN
}

func (x *Sound2) GetListEnum() []Sound2_Enum {
	if x != nil {
		return x.ListEnum
	}
	return nil
}

func (x *Sound2) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Sound2) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Sound2) GetWrapperBool() *wrapperspb.BoolValue {
	if x != nil {
		return x.WrapperBool
	}
	return nil
}

func (x *Sound2) GetWrapperBytes() *wrapperspb.BytesValue {
	if x != nil {
		return x.WrapperBytes
	}
	return nil
}

func (x *Sound2) GetWrapperDouble() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WrapperDouble
	}
	return nil
}

func (x *Sound2) GetWrapperFloat() *wrapperspb.FloatValue {
	if x != nil {
		return x.WrapperFloat
	}
	return nil
}

func (x *Sound2) GetWrapperInt32() *wrapperspb.Int32Value {
	if x != nil {
		return x.WrapperInt32
	}
	return nil
}

func (x *Sound2) GetWrapperInt64() *wrapperspb.Int64Value {
	if x != nil {
		return x.WrapperInt64
	}
	return nil
}

func (x *Sound2) GetWrapperString() *wrapperspb.StringValue {
	if x != nil {
		return x.WrapperString
	}
	return nil
}

func (x *Sound2) GetWrapperUint32() *wrapperspb.UInt32Value {
	if x != nil {
		return x.WrapperUint32
	}
	return nil
}

func (x *Sound2) GetWrapperUint64() *wrapperspb.UInt64Value {
	if x != nil {
		return x.WrapperUint64
	}
	return nil
}

func (x *Sound2) GetListTimestamp() []*timestamppb.Timestamp {
	if x != nil {
		return x.ListTimestamp
	}
	return nil
}

func (x *Sound2) GetListDuration() []*durationpb.Duration {
	if x != nil {
		return x.ListDuration
	}
	return nil
}

func (x *Sound2) GetListWrapperBool() []*wrapperspb.BoolValue {
	if x != nil {
		return x.ListWrapperBool
	}
	return nil
}

func (x *Sound2) GetListWrapperBytes() []*wrapperspb.BytesValue {
	if x != nil {
		return x.ListWrapperBytes
	}
	return nil
}

func (x *Sound2) GetListWrapperDouble() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.ListWrapperDouble
	}
	return nil
}

func (x *Sound2) GetListWrapperFloat() []*wrapperspb.FloatValue {
	if x != nil {
		return x.ListWrapperFloat
	}
	return nil
}

func (x *Sound2) GetListWrapperInt32() []*wrapperspb.Int32Value {
	if x != nil {
		return x.ListWrapperInt32
	}
	return nil
}

func (x *Sound2) GetListWrapperInt64() []*wrapperspb.Int64Value {
	if x != nil {
		return x.ListWrapperInt64
	}
	return nil
}

func (x *Sound2) GetListWrapperString() []*wrapperspb.StringValue {
	if x != nil {
		return x.ListWrapperString
	}
	return nil
}

func (x *Sound2) GetListWrapperUint32() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.ListWrapperUint32
	}
	return nil
}

func (x *Sound2) GetListWrapperUint64() []*wrapperspb.UInt64Value {
	if x != nil {
		return x.ListWrapperUint64
	}
	return nil
}

var File_proto2_proto protoreflect.FileDescriptor

var file_proto2_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x73,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x52,
	0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x18, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x6c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0a, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x11,
	0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x12, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x07, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x20, 0x20, 0x03, 0x28, 0x10, 0x52,
	0x0c, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x21, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x29,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x50, 0x0a, 0x11, 0x6d, 0x61, 0x70,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x2a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08,
	0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x40, 0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12,
	0x40, 0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x40, 0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x40, 0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x43, 0x0a, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0e, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x43, 0x0a, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x47, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x48, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x49, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x6c, 0x69, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x49, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x4a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0x4b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x4c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x4d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6c, 0x69,
	0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x49,
	0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x4e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x4c, 0x0a, 0x13, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x4f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x50,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x4c, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x51, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x21, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x46,
	0x45, 0x42, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x52, 0x10, 0x02, 0x32, 0x32, 0x0a,
	0x06, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x12, 0x28, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12,
	0x0f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x32,
	0x1a, 0x0f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x32, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62,
}

var (
	file_proto2_proto_rawDescOnce sync.Once
	file_proto2_proto_rawDescData = file_proto2_proto_rawDesc
)

func file_proto2_proto_rawDescGZIP() []byte {
	file_proto2_proto_rawDescOnce.Do(func() {
		file_proto2_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto2_proto_rawDescData)
	})
	return file_proto2_proto_rawDescData
}

var file_proto2_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto2_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto2_proto_goTypes = []interface{}{
	(Sound2_Enum)(0),               // 0: example.Sound2.Enum
	(*Sound2)(nil),                 // 1: example.Sound2
	nil,                            // 2: example.Sound2.MapStringInt64Entry
	nil,                            // 3: example.Sound2.MapStringStringEntry
	(*timestamppb.Timestamp)(nil),  // 4: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),    // 5: google.protobuf.Duration
	(*wrapperspb.BoolValue)(nil),   // 6: google.protobuf.BoolValue
	(*wrapperspb.BytesValue)(nil),  // 7: google.protobuf.BytesValue
	(*wrapperspb.DoubleValue)(nil), // 8: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),  // 9: google.protobuf.FloatValue
	(*wrapperspb.Int32Value)(nil),  // 10: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),  // 11: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil), // 12: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil), // 13: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil), // 14: google.protobuf.UInt64Value
}
var file_proto2_proto_depIdxs = []int32{
	2,  // 0: example.Sound2.map_string_int64:type_name -> example.Sound2.MapStringInt64Entry
	3,  // 1: example.Sound2.map_string_string:type_name -> example.Sound2.MapStringStringEntry
	0,  // 2: example.Sound2.enum:type_name -> example.Sound2.Enum
	0,  // 3: example.Sound2.list_enum:type_name -> example.Sound2.Enum
	4,  // 4: example.Sound2.timestamp:type_name -> google.protobuf.Timestamp
	5,  // 5: example.Sound2.duration:type_name -> google.protobuf.Duration
	6,  // 6: example.Sound2.wrapper_bool:type_name -> google.protobuf.BoolValue
	7,  // 7: example.Sound2.wrapper_bytes:type_name -> google.protobuf.BytesValue
	8,  // 8: example.Sound2.wrapper_double:type_name -> google.protobuf.DoubleValue
	9,  // 9: example.Sound2.wrapper_float:type_name -> google.protobuf.FloatValue
	10, // 10: example.Sound2.wrapper_int32:type_name -> google.protobuf.Int32Value
	11, // 11: example.Sound2.wrapper_int64:type_name -> google.protobuf.Int64Value
	12, // 12: example.Sound2.wrapper_string:type_name -> google.protobuf.StringValue
	13, // 13: example.Sound2.wrapper_uint32:type_name -> google.protobuf.UInt32Value
	14, // 14: example.Sound2.wrapper_uint64:type_name -> google.protobuf.UInt64Value
	4,  // 15: example.Sound2.list_timestamp:type_name -> google.protobuf.Timestamp
	5,  // 16: example.Sound2.list_duration:type_name -> google.protobuf.Duration
	6,  // 17: example.Sound2.list_wrapper_bool:type_name -> google.protobuf.BoolValue
	7,  // 18: example.Sound2.list_wrapper_bytes:type_name -> google.protobuf.BytesValue
	8,  // 19: example.Sound2.list_wrapper_double:type_name -> google.protobuf.DoubleValue
	9,  // 20: example.Sound2.list_wrapper_float:type_name -> google.protobuf.FloatValue
	10, // 21: example.Sound2.list_wrapper_int32:type_name -> google.protobuf.Int32Value
	11, // 22: example.Sound2.list_wrapper_int64:type_name -> google.protobuf.Int64Value
	12, // 23: example.Sound2.list_wrapper_string:type_name -> google.protobuf.StringValue
	13, // 24: example.Sound2.list_wrapper_uint32:type_name -> google.protobuf.UInt32Value
	14, // 25: example.Sound2.list_wrapper_uint64:type_name -> google.protobuf.UInt64Value
	1,  // 26: example.Proto2.Echo:input_type -> example.Sound2
	1,  // 27: example.Proto2.Echo:output_type -> example.Sound2
	27, // [27:28] is the sub-list for method output_type
	26, // [26:27] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_proto2_proto_init() }
func file_proto2_proto_init() {
	if File_proto2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sound2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto2_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto2_proto_goTypes,
		DependencyIndexes: file_proto2_proto_depIdxs,
		EnumInfos:         file_proto2_proto_enumTypes,
		MessageInfos:      file_proto2_proto_msgTypes,
	}.Build()
	File_proto2_proto = out.File
	file_proto2_proto_rawDesc = nil
	file_proto2_proto_goTypes = nil
	file_proto2_proto_depIdxs = nil
}
