// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: cache.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cache_Set_FullMethodName      = "/example.Cache/Set"
	Cache_Get_FullMethodName      = "/example.Cache/Get"
	Cache_MultiSet_FullMethodName = "/example.Cache/MultiSet"
	Cache_MultiGet_FullMethodName = "/example.Cache/MultiGet"
)

// CacheClient is the client API for Cache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheClient interface {
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	MultiSet(ctx context.Context, opts ...grpc.CallOption) (Cache_MultiSetClient, error)
	MultiGet(ctx context.Context, opts ...grpc.CallOption) (Cache_MultiGetClient, error)
}

type cacheClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheClient(cc grpc.ClientConnInterface) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, Cache_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Cache_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) MultiSet(ctx context.Context, opts ...grpc.CallOption) (Cache_MultiSetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[0], Cache_MultiSet_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheMultiSetClient{stream}
	return x, nil
}

type Cache_MultiSetClient interface {
	Send(*SetRequest) error
	CloseAndRecv() (*SetResponse, error)
	grpc.ClientStream
}

type cacheMultiSetClient struct {
	grpc.ClientStream
}

func (x *cacheMultiSetClient) Send(m *SetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheMultiSetClient) CloseAndRecv() (*SetResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) MultiGet(ctx context.Context, opts ...grpc.CallOption) (Cache_MultiGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[1], Cache_MultiGet_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheMultiGetClient{stream}
	return x, nil
}

type Cache_MultiGetClient interface {
	Send(*GetRequest) error
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type cacheMultiGetClient struct {
	grpc.ClientStream
}

func (x *cacheMultiGetClient) Send(m *GetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheMultiGetClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CacheServer is the server API for Cache service.
// All implementations must embed UnimplementedCacheServer
// for forward compatibility
type CacheServer interface {
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	MultiSet(Cache_MultiSetServer) error
	MultiGet(Cache_MultiGetServer) error
	mustEmbedUnimplementedCacheServer()
}

// UnimplementedCacheServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServer struct {
}

func (UnimplementedCacheServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedCacheServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCacheServer) MultiSet(Cache_MultiSetServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiSet not implemented")
}
func (UnimplementedCacheServer) MultiGet(Cache_MultiGetServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiGet not implemented")
}
func (UnimplementedCacheServer) mustEmbedUnimplementedCacheServer() {}

// UnsafeCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServer will
// result in compilation errors.
type UnsafeCacheServer interface {
	mustEmbedUnimplementedCacheServer()
}

func RegisterCacheServer(s grpc.ServiceRegistrar, srv CacheServer) {
	s.RegisterService(&Cache_ServiceDesc, srv)
}

func _Cache_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_MultiSet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServer).MultiSet(&cacheMultiSetServer{stream})
}

type Cache_MultiSetServer interface {
	SendAndClose(*SetResponse) error
	Recv() (*SetRequest, error)
	grpc.ServerStream
}

type cacheMultiSetServer struct {
	grpc.ServerStream
}

func (x *cacheMultiSetServer) SendAndClose(m *SetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheMultiSetServer) Recv() (*SetRequest, error) {
	m := new(SetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cache_MultiGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServer).MultiGet(&cacheMultiGetServer{stream})
}

type Cache_MultiGetServer interface {
	Send(*GetResponse) error
	Recv() (*GetRequest, error)
	grpc.ServerStream
}

type cacheMultiGetServer struct {
	grpc.ServerStream
}

func (x *cacheMultiGetServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheMultiGetServer) Recv() (*GetRequest, error) {
	m := new(GetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Cache_ServiceDesc is the grpc.ServiceDesc for Cache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Cache_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Cache_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MultiSet",
			Handler:       _Cache_MultiSet_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MultiGet",
			Handler:       _Cache_MultiGet_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cache.proto",
}
